// Code generated by mockery v2.43.2. DO NOT EDIT.

package repository

import (
	context "context"
	sql "database/sql"

	mock "github.com/stretchr/testify/mock"
)

// QuerierMocked is an autogenerated mock type for the Querier type
type QuerierMocked struct {
	mock.Mock
}

type QuerierMocked_Expecter struct {
	mock *mock.Mock
}

func (_m *QuerierMocked) EXPECT() *QuerierMocked_Expecter {
	return &QuerierMocked_Expecter{mock: &_m.Mock}
}

// CreateCategory provides a mock function with given fields: ctx, arg
func (_m *QuerierMocked) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateCategory")
	}

	var r0 Category
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, CreateCategoryParams) (Category, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, CreateCategoryParams) Category); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(Category)
	}

	if rf, ok := ret.Get(1).(func(context.Context, CreateCategoryParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QuerierMocked_CreateCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCategory'
type QuerierMocked_CreateCategory_Call struct {
	*mock.Call
}

// CreateCategory is a helper method to define mock.On call
//   - ctx context.Context
//   - arg CreateCategoryParams
func (_e *QuerierMocked_Expecter) CreateCategory(ctx interface{}, arg interface{}) *QuerierMocked_CreateCategory_Call {
	return &QuerierMocked_CreateCategory_Call{Call: _e.mock.On("CreateCategory", ctx, arg)}
}

func (_c *QuerierMocked_CreateCategory_Call) Run(run func(ctx context.Context, arg CreateCategoryParams)) *QuerierMocked_CreateCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(CreateCategoryParams))
	})
	return _c
}

func (_c *QuerierMocked_CreateCategory_Call) Return(_a0 Category, _a1 error) *QuerierMocked_CreateCategory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *QuerierMocked_CreateCategory_Call) RunAndReturn(run func(context.Context, CreateCategoryParams) (Category, error)) *QuerierMocked_CreateCategory_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTicket provides a mock function with given fields: ctx, arg
func (_m *QuerierMocked) CreateTicket(ctx context.Context, arg CreateTicketParams) (Ticket, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateTicket")
	}

	var r0 Ticket
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, CreateTicketParams) (Ticket, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, CreateTicketParams) Ticket); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(Ticket)
	}

	if rf, ok := ret.Get(1).(func(context.Context, CreateTicketParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QuerierMocked_CreateTicket_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTicket'
type QuerierMocked_CreateTicket_Call struct {
	*mock.Call
}

// CreateTicket is a helper method to define mock.On call
//   - ctx context.Context
//   - arg CreateTicketParams
func (_e *QuerierMocked_Expecter) CreateTicket(ctx interface{}, arg interface{}) *QuerierMocked_CreateTicket_Call {
	return &QuerierMocked_CreateTicket_Call{Call: _e.mock.On("CreateTicket", ctx, arg)}
}

func (_c *QuerierMocked_CreateTicket_Call) Run(run func(ctx context.Context, arg CreateTicketParams)) *QuerierMocked_CreateTicket_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(CreateTicketParams))
	})
	return _c
}

func (_c *QuerierMocked_CreateTicket_Call) Return(_a0 Ticket, _a1 error) *QuerierMocked_CreateTicket_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *QuerierMocked_CreateTicket_Call) RunAndReturn(run func(context.Context, CreateTicketParams) (Ticket, error)) *QuerierMocked_CreateTicket_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCategory provides a mock function with given fields: ctx, id
func (_m *QuerierMocked) DeleteCategory(ctx context.Context, id int32) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCategory")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QuerierMocked_DeleteCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCategory'
type QuerierMocked_DeleteCategory_Call struct {
	*mock.Call
}

// DeleteCategory is a helper method to define mock.On call
//   - ctx context.Context
//   - id int32
func (_e *QuerierMocked_Expecter) DeleteCategory(ctx interface{}, id interface{}) *QuerierMocked_DeleteCategory_Call {
	return &QuerierMocked_DeleteCategory_Call{Call: _e.mock.On("DeleteCategory", ctx, id)}
}

func (_c *QuerierMocked_DeleteCategory_Call) Run(run func(ctx context.Context, id int32)) *QuerierMocked_DeleteCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *QuerierMocked_DeleteCategory_Call) Return(_a0 error) *QuerierMocked_DeleteCategory_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *QuerierMocked_DeleteCategory_Call) RunAndReturn(run func(context.Context, int32) error) *QuerierMocked_DeleteCategory_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTicket provides a mock function with given fields: ctx, id
func (_m *QuerierMocked) DeleteTicket(ctx context.Context, id int32) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTicket")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QuerierMocked_DeleteTicket_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTicket'
type QuerierMocked_DeleteTicket_Call struct {
	*mock.Call
}

// DeleteTicket is a helper method to define mock.On call
//   - ctx context.Context
//   - id int32
func (_e *QuerierMocked_Expecter) DeleteTicket(ctx interface{}, id interface{}) *QuerierMocked_DeleteTicket_Call {
	return &QuerierMocked_DeleteTicket_Call{Call: _e.mock.On("DeleteTicket", ctx, id)}
}

func (_c *QuerierMocked_DeleteTicket_Call) Run(run func(ctx context.Context, id int32)) *QuerierMocked_DeleteTicket_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *QuerierMocked_DeleteTicket_Call) Return(_a0 error) *QuerierMocked_DeleteTicket_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *QuerierMocked_DeleteTicket_Call) RunAndReturn(run func(context.Context, int32) error) *QuerierMocked_DeleteTicket_Call {
	_c.Call.Return(run)
	return _c
}

// GetCategoryById provides a mock function with given fields: ctx, id
func (_m *QuerierMocked) GetCategoryById(ctx context.Context, id int32) (Category, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetCategoryById")
	}

	var r0 Category
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (Category, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) Category); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(Category)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QuerierMocked_GetCategoryById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCategoryById'
type QuerierMocked_GetCategoryById_Call struct {
	*mock.Call
}

// GetCategoryById is a helper method to define mock.On call
//   - ctx context.Context
//   - id int32
func (_e *QuerierMocked_Expecter) GetCategoryById(ctx interface{}, id interface{}) *QuerierMocked_GetCategoryById_Call {
	return &QuerierMocked_GetCategoryById_Call{Call: _e.mock.On("GetCategoryById", ctx, id)}
}

func (_c *QuerierMocked_GetCategoryById_Call) Run(run func(ctx context.Context, id int32)) *QuerierMocked_GetCategoryById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *QuerierMocked_GetCategoryById_Call) Return(_a0 Category, _a1 error) *QuerierMocked_GetCategoryById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *QuerierMocked_GetCategoryById_Call) RunAndReturn(run func(context.Context, int32) (Category, error)) *QuerierMocked_GetCategoryById_Call {
	_c.Call.Return(run)
	return _c
}

// GetTicketById provides a mock function with given fields: ctx, id
func (_m *QuerierMocked) GetTicketById(ctx context.Context, id int32) (GetTicketByIdRow, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetTicketById")
	}

	var r0 GetTicketByIdRow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) (GetTicketByIdRow, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32) GetTicketByIdRow); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(GetTicketByIdRow)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QuerierMocked_GetTicketById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTicketById'
type QuerierMocked_GetTicketById_Call struct {
	*mock.Call
}

// GetTicketById is a helper method to define mock.On call
//   - ctx context.Context
//   - id int32
func (_e *QuerierMocked_Expecter) GetTicketById(ctx interface{}, id interface{}) *QuerierMocked_GetTicketById_Call {
	return &QuerierMocked_GetTicketById_Call{Call: _e.mock.On("GetTicketById", ctx, id)}
}

func (_c *QuerierMocked_GetTicketById_Call) Run(run func(ctx context.Context, id int32)) *QuerierMocked_GetTicketById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *QuerierMocked_GetTicketById_Call) Return(_a0 GetTicketByIdRow, _a1 error) *QuerierMocked_GetTicketById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *QuerierMocked_GetTicketById_Call) RunAndReturn(run func(context.Context, int32) (GetTicketByIdRow, error)) *QuerierMocked_GetTicketById_Call {
	_c.Call.Return(run)
	return _c
}

// ListCategories provides a mock function with given fields: ctx
func (_m *QuerierMocked) ListCategories(ctx context.Context) ([]Category, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListCategories")
	}

	var r0 []Category
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]Category, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []Category); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Category)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QuerierMocked_ListCategories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCategories'
type QuerierMocked_ListCategories_Call struct {
	*mock.Call
}

// ListCategories is a helper method to define mock.On call
//   - ctx context.Context
func (_e *QuerierMocked_Expecter) ListCategories(ctx interface{}) *QuerierMocked_ListCategories_Call {
	return &QuerierMocked_ListCategories_Call{Call: _e.mock.On("ListCategories", ctx)}
}

func (_c *QuerierMocked_ListCategories_Call) Run(run func(ctx context.Context)) *QuerierMocked_ListCategories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *QuerierMocked_ListCategories_Call) Return(_a0 []Category, _a1 error) *QuerierMocked_ListCategories_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *QuerierMocked_ListCategories_Call) RunAndReturn(run func(context.Context) ([]Category, error)) *QuerierMocked_ListCategories_Call {
	_c.Call.Return(run)
	return _c
}

// ListSubCategories provides a mock function with given fields: ctx, parentID
func (_m *QuerierMocked) ListSubCategories(ctx context.Context, parentID sql.NullInt32) ([]Category, error) {
	ret := _m.Called(ctx, parentID)

	if len(ret) == 0 {
		panic("no return value specified for ListSubCategories")
	}

	var r0 []Category
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql.NullInt32) ([]Category, error)); ok {
		return rf(ctx, parentID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql.NullInt32) []Category); ok {
		r0 = rf(ctx, parentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Category)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql.NullInt32) error); ok {
		r1 = rf(ctx, parentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QuerierMocked_ListSubCategories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSubCategories'
type QuerierMocked_ListSubCategories_Call struct {
	*mock.Call
}

// ListSubCategories is a helper method to define mock.On call
//   - ctx context.Context
//   - parentID sql.NullInt32
func (_e *QuerierMocked_Expecter) ListSubCategories(ctx interface{}, parentID interface{}) *QuerierMocked_ListSubCategories_Call {
	return &QuerierMocked_ListSubCategories_Call{Call: _e.mock.On("ListSubCategories", ctx, parentID)}
}

func (_c *QuerierMocked_ListSubCategories_Call) Run(run func(ctx context.Context, parentID sql.NullInt32)) *QuerierMocked_ListSubCategories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql.NullInt32))
	})
	return _c
}

func (_c *QuerierMocked_ListSubCategories_Call) Return(_a0 []Category, _a1 error) *QuerierMocked_ListSubCategories_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *QuerierMocked_ListSubCategories_Call) RunAndReturn(run func(context.Context, sql.NullInt32) ([]Category, error)) *QuerierMocked_ListSubCategories_Call {
	_c.Call.Return(run)
	return _c
}

// ListTickets provides a mock function with given fields: ctx
func (_m *QuerierMocked) ListTickets(ctx context.Context) ([]Ticket, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListTickets")
	}

	var r0 []Ticket
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]Ticket, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []Ticket); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Ticket)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QuerierMocked_ListTickets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTickets'
type QuerierMocked_ListTickets_Call struct {
	*mock.Call
}

// ListTickets is a helper method to define mock.On call
//   - ctx context.Context
func (_e *QuerierMocked_Expecter) ListTickets(ctx interface{}) *QuerierMocked_ListTickets_Call {
	return &QuerierMocked_ListTickets_Call{Call: _e.mock.On("ListTickets", ctx)}
}

func (_c *QuerierMocked_ListTickets_Call) Run(run func(ctx context.Context)) *QuerierMocked_ListTickets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *QuerierMocked_ListTickets_Call) Return(_a0 []Ticket, _a1 error) *QuerierMocked_ListTickets_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *QuerierMocked_ListTickets_Call) RunAndReturn(run func(context.Context) ([]Ticket, error)) *QuerierMocked_ListTickets_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCategory provides a mock function with given fields: ctx, arg
func (_m *QuerierMocked) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCategory")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, UpdateCategoryParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QuerierMocked_UpdateCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCategory'
type QuerierMocked_UpdateCategory_Call struct {
	*mock.Call
}

// UpdateCategory is a helper method to define mock.On call
//   - ctx context.Context
//   - arg UpdateCategoryParams
func (_e *QuerierMocked_Expecter) UpdateCategory(ctx interface{}, arg interface{}) *QuerierMocked_UpdateCategory_Call {
	return &QuerierMocked_UpdateCategory_Call{Call: _e.mock.On("UpdateCategory", ctx, arg)}
}

func (_c *QuerierMocked_UpdateCategory_Call) Run(run func(ctx context.Context, arg UpdateCategoryParams)) *QuerierMocked_UpdateCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(UpdateCategoryParams))
	})
	return _c
}

func (_c *QuerierMocked_UpdateCategory_Call) Return(_a0 error) *QuerierMocked_UpdateCategory_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *QuerierMocked_UpdateCategory_Call) RunAndReturn(run func(context.Context, UpdateCategoryParams) error) *QuerierMocked_UpdateCategory_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTicket provides a mock function with given fields: ctx, arg
func (_m *QuerierMocked) UpdateTicket(ctx context.Context, arg UpdateTicketParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTicket")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, UpdateTicketParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QuerierMocked_UpdateTicket_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTicket'
type QuerierMocked_UpdateTicket_Call struct {
	*mock.Call
}

// UpdateTicket is a helper method to define mock.On call
//   - ctx context.Context
//   - arg UpdateTicketParams
func (_e *QuerierMocked_Expecter) UpdateTicket(ctx interface{}, arg interface{}) *QuerierMocked_UpdateTicket_Call {
	return &QuerierMocked_UpdateTicket_Call{Call: _e.mock.On("UpdateTicket", ctx, arg)}
}

func (_c *QuerierMocked_UpdateTicket_Call) Run(run func(ctx context.Context, arg UpdateTicketParams)) *QuerierMocked_UpdateTicket_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(UpdateTicketParams))
	})
	return _c
}

func (_c *QuerierMocked_UpdateTicket_Call) Return(_a0 error) *QuerierMocked_UpdateTicket_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *QuerierMocked_UpdateTicket_Call) RunAndReturn(run func(context.Context, UpdateTicketParams) error) *QuerierMocked_UpdateTicket_Call {
	_c.Call.Return(run)
	return _c
}

// NewQuerierMocked creates a new instance of QuerierMocked. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQuerierMocked(t interface {
	mock.TestingT
	Cleanup(func())
}) *QuerierMocked {
	mock := &QuerierMocked{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
